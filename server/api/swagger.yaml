---
swagger: "2.0"
info:
  description: "This is a sample server clubstore server.  You can find out more about\
    \     Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net,\
    \ #swagger](http://swagger.io/irc/).      For this sample, you can use the api\
    \ key `special-key` to test the authorization     filters."
  version: "1.0.0"
  title: "Swagger Team Group Peloton Communicator API"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "api.pelotonCommunicator.romdj.xyz"
basePath: "/v2"
tags:
- name: "club"
  description: "Club information"
- name: "team"
  description: "Access to Team information within a Club"
- name: "user"
  description: "Operations about user"
- name: "subscription"
  description: "Subscription information"
schemes:
- "https"
- "http"
paths:
  /club:
    post:
      tags:
      - "club"
      summary: "Add a new club to the collection"
      description: ""
      operationId: "addClub"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Club object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Club"
        x-exportParamName: "Body"
      security:
      - clubstore_auth:
        - "write:clubs"
        - "read:clubs"
      responses:
        "405":
          description: "Invalid input"
    put:
      tags:
      - "club"
      summary: "Update an existing club"
      description: ""
      operationId: "updateclub"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "club object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Club"
        x-exportParamName: "Body"
      security:
      - clubstore_auth:
        - "write:clubs"
        - "read:clubs"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "club not found"
        "405":
          description: "Validation exception"
  /club/findByStatus:
    get:
      tags:
      - "club"
      summary: "Finds clubs by status"
      description: "Multiple status values can be provided with comma separated strings"
      operationId: "findclubsByStatus"
      produces:
      - "application/json"
      parameters:
      - name: "status"
        in: "query"
        description: "Status values that need to be considered for filter"
        required: true
        type: "array"
        items:
          type: "string"
          default: "available"
          enum:
          - "available"
          - "pending"
          - "sold"
        collectionFormat: "multi"
        x-exportParamName: "Status"
      security:
      - clubstore_auth:
        - "write:clubs"
        - "read:clubs"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Club"
        "400":
          description: "Invalid status value"
  /club/{clubId}:
    get:
      tags:
      - "club"
      summary: "Find club by Name or ID"
      description: "Returns a single club"
      operationId: "getClubById"
      produces:
      - "application/json"
      parameters:
      - name: "clubId"
        in: "path"
        description: "ID of club to return"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "ClubId"
      security:
      - api_key: []
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Club"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "club not found"
    post:
      tags:
      - "club"
      summary: "Updates a club in the store with form data"
      description: ""
      operationId: "updateclubWithForm"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "clubId"
        in: "path"
        description: "ID of club that needs to be updated"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "ClubId"
      - name: "name"
        in: "formData"
        description: "Updated name of the club"
        required: false
        type: "string"
        x-exportParamName: "Name"
        x-optionalDataType: "String"
      - name: "status"
        in: "formData"
        description: "Updated status of the club"
        required: false
        type: "string"
        x-exportParamName: "Status"
        x-optionalDataType: "String"
      security:
      - clubstore_auth:
        - "write:clubs"
        - "read:clubs"
      responses:
        "405":
          description: "Invalid input"
    delete:
      tags:
      - "club"
      summary: "Deletes a club"
      description: ""
      operationId: "deleteclub"
      produces:
      - "application/json"
      parameters:
      - name: "api_key"
        in: "header"
        required: false
        type: "string"
        x-exportParamName: "ApiKey"
        x-optionalDataType: "String"
      - name: "clubId"
        in: "path"
        description: "club id to delete"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "ClubId"
      security:
      - clubstore_auth:
        - "write:clubs"
        - "read:clubs"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "club not found"
  /club/{clubId}/uploadImage:
    post:
      tags:
      - "club"
      summary: "uploads an image"
      description: ""
      operationId: "uploadFile"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - name: "clubId"
        in: "path"
        description: "ID of club to update"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "ClubId"
      - name: "additionalMetadata"
        in: "formData"
        description: "Additional data to pass to server"
        required: false
        type: "string"
        x-exportParamName: "AdditionalMetadata"
        x-optionalDataType: "String"
      - name: "file"
        in: "formData"
        description: "file to upload"
        required: false
        type: "file"
        x-exportParamName: "File"
      security:
      - clubstore_auth:
        - "write:clubs"
        - "read:clubs"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/ApiResponse"
  /store/inventory:
    get:
      tags:
      - "store"
      summary: "Returns club inventories by status"
      description: "Returns a map of status codes to quantities"
      operationId: "getInventory"
      produces:
      - "application/json"
      parameters: []
      security:
      - api_key: []
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "object"
            additionalProperties:
              type: "integer"
              format: "int32"
  /store/order:
    post:
      tags:
      - "store"
      summary: "Place an order for a club"
      description: ""
      operationId: "placeOrder"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "order placed for purchasing the club"
        required: true
        schema:
          $ref: "#/definitions/Order"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Order"
        "400":
          description: "Invalid Order"
  /store/order/{orderId}:
    get:
      tags:
      - "store"
      summary: "Find purchase order by ID"
      description: "For valid response try integer IDs with value >= 1 and <= 10.\
        \         Other values will generated exceptions"
      operationId: "getOrderById"
      produces:
      - "application/json"
      parameters:
      - name: "orderId"
        in: "path"
        description: "ID of club that needs to be fetched"
        required: true
        type: "integer"
        maximum: 10
        minimum: 1
        format: "int64"
        x-exportParamName: "OrderId"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Order"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Order not found"
    delete:
      tags:
      - "store"
      summary: "Delete purchase order by ID"
      description: "For valid response try integer IDs with positive integer value.\
        \         Negative or non-integer values will generate API errors"
      operationId: "deleteOrder"
      produces:
      - "application/json"
      parameters:
      - name: "orderId"
        in: "path"
        description: "ID of the order that needs to be deleted"
        required: true
        type: "integer"
        minimum: 1
        format: "int64"
        x-exportParamName: "OrderId"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Order not found"
  /user:
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
        x-exportParamName: "Body"
      responses:
        default:
          description: "successful operation"
  /user/createWithArray:
    post:
      tags:
      - "user"
      summary: "Creates list of users with given input array"
      description: ""
      operationId: "createUsersWithArrayInput"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of user object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/User"
        x-exportParamName: "Body"
      responses:
        default:
          description: "successful operation"
  /user/createWithList:
    post:
      tags:
      - "user"
      summary: "Creates list of users with given input array"
      description: ""
      operationId: "createUsersWithListInput"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of user object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/User"
        x-exportParamName: "Body"
      responses:
        default:
          description: "successful operation"
  /user/login:
    get:
      tags:
      - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "The user name for login"
        required: true
        type: "string"
        x-exportParamName: "Username"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
        x-exportParamName: "Password"
      responses:
        "200":
          description: "successful operation"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
          schema:
            type: "string"
        "400":
          description: "Invalid username/password supplied"
  /user/logout:
    get:
      tags:
      - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
  /user/{username}:
    get:
      tags:
      - "user"
      summary: "Get user by user name"
      description: ""
      operationId: "getUserByName"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be fetched. Use user1 for testing. "
        required: true
        type: "string"
        x-exportParamName: "Username"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
    put:
      tags:
      - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
        x-exportParamName: "Username"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
        x-exportParamName: "Body"
      responses:
        "400":
          description: "Invalid user supplied"
        "404":
          description: "User not found"
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "string"
        x-exportParamName: "Username"
      responses:
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
securityDefinitions:
  clubstore_auth:
    type: "oauth2"
    authorizationUrl: "http://clubstore.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:clubs: "modify clubs in your account"
      read:clubs: "read your clubs"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  Order:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      clubId:
        type: "integer"
        format: "int64"
      quantity:
        type: "integer"
        format: "int32"
      shipDate:
        type: "string"
        format: "date-time"
      status:
        type: "string"
        description: "Order Status"
        enum:
        - "placed"
        - "approved"
        - "delivered"
      complete:
        type: "boolean"
        default: false
    xml:
      name: "Order"
    example:
      quantity: 1
      clubId: 6
      id: 0
      shipDate: "2000-01-23T04:56:07.000+00:00"
      complete: false
      status: "placed"
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      userStatus:
        type: "integer"
        format: "int32"
        description: "User Status"
    xml:
      name: "User"
    example:
      firstName: "firstName"
      lastName: "lastName"
      password: "password"
      userStatus: 6
      phone: "phone"
      id: 0
      email: "email"
      username: "username"
  Club:
    type: "object"
    required:
    - "name"
    properties:
      id:
        type: "string"
        format: "uuid"
      name:
        type: "string"
        example: "FC Montreal"
      status:
        type: "string"
        description: "club status in the store"
        enum:
        - "active"
        - "inactive"
      subscription:
        type: "string"
        description: "club subscription status"
        enum:
        - "active"
        - "inactive"
    example:
      name: "FC Montreal"
      id: "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
      subscription: "active"
      status: "active"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
    example:
      code: 0
      type: "type"
      message: "message"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"
